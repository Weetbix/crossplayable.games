name: "Website"

permissions:
  # Allow Dependabot to write PR comments
  pull-requests: write

on:
  # On pushes to master
  push:
    branches:
      - main

  # on PR opens
  pull_request:

  # Allow manually running
  workflow_dispatch:

  # Deploy every wednesday
  schedule:
    - cron: "0 18 * * WED"

jobs:
  website:
    name: "Website"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        run: yarn

      - name: Build
        run: yarn build
        env:
          TWITCH_CLIENT_ID: ${{ secrets.TWITCH_CLIENT_ID }}
          TWITCH_CLIENT_SECRET: ${{ secrets.TWITCH_CLIENT_SECRET }}

      - name: E2E tests
        uses: cypress-io/github-action@v2
        with:
          start: yarn gatsby serve
          wait-on: http://localhost:9000

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Check Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      # Don't fail on this step so we can run the next
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Plan PR Comment
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

        # Now fail if the plan didnt work
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

        # Apply but, on main only, not PRs
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Deploy to S3
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: yarn deploy:s3
